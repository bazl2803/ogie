// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Order Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id            Int             @id @default(autoincrement())
  thumbnail     String
  name          String
  description   String
  price         Float
  oldPrice      Float?
  stock         Int             @default(0)
  status        String
  brand         Brand           @relation(fields: [brandId], references: [id])
  brandId       Int
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  orderLines    OrderLine[]
  productImages ProductImages[]
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  name      String
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  logo     String?
  products Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  date       DateTime
  dueTotal   Float
  orderLines OrderLine[]
  userId     String
  user       User        @relation(fields: [userId], references: [id])
}

model OrderLine {
  id        Int     @id @default(autoincrement())
  quantity  Int
  lineTotal Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}
